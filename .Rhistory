ggplot(z.m, aes(X1, X2, fill = value)) + geom_tile() +
scale_fill_gradient(low = "blue",  high = "red")
install.packages("reshape")
library(ggplot2)
library(reshape)
z <- cor(mtcars)
z.m <- melt(z)
ggplot(z.m, aes(X1, X2, fill = value)) + geom_tile() +
scale_fill_gradient(low = "blue",  high = "red")
?ggplot
ggplot(corMelt, aes(fill = value)) + geom_tile() +
scale_fill_gradient(low = "blue",  high = "red")
library(ggplot2)
library(reshape)
corMat <- cor(mtcars)
corMelt <- melt(corMat)
ggplot(corMelt, aes(fill = value)) + geom_tile() +
scale_fill_gradient(low = "blue",  high = "red")
library(ggplot2)
library(reshape)
corMat <- cor(mtcars)
corMelt <- melt(corMat)
ggplot(corMelt, aes(fill = value)) + geom_tile() +
scale_fill_gradient(low = "blue",  high = "red")
library(ggplot2)
library(reshape)
corMat <- cor(mtcars)
corMelt <- melt(corMat)
ggplot(corMelt, aes(x1, x2, fill = value)) + geom_tile() +
scale_fill_gradient(low = "blue",  high = "red")
z <- cor(mtcars)
z.m <- melt(z)
ggplot(z.m, aes(X1, X2, fill = value)) + geom_tile() +
scale_fill_gradient(low = "blue",  high = "red")
corMat <- cor(mtcars)
corMelt <- melt(corMat)
ggplot(corMelt, aes(X1, X2, fill = value)) + geom_tile() +
scale_fill_gradient(low = "blue",  high = "red")
ggplot(corMelt, aes(X1, X2, fill = value)) + geom_tile() +
scale_fill_gradient(low = "blue",  high = "red") +xlab("")
ggplot(corMelt, aes(X1, X2, fill = value)) + geom_tile() +
scale_fill_gradient(low = "blue",  high = "red") +xlab("") +ylab("")
reg2 <- lm(data=mtcars,mpg~am + disp +cyl +wt)
plot(reg2)
summary(reg2)
lm(data=mtcars,mpg~am +cyl +wt)
t <- lm(data=mtcars,mpg~am +cyl +wt)
coef(t)
summary(t)
t <- lm(data=mtcars,mpg~am+wt)
summary(t)
t <- lm(data=mtcars,mpg~am+wt+hp)
summary(t)
t <- lm(data=mtcars,mpg~am+wt+hp+gear)
summary(t)
?mtcars
t <- lm(data=mtcars,mpg~am+wt+hp+gear+disp+cyl)
summary(t)
t <- lm(data=mtcars,mpg~am+wt+hp+disp)
summary(t)
t <- lm(data=mtcars,mpg~am+wt+disp)
summary(t)
t <- lm(data=mtcars,mpg~am+wt)
summary(t)
t <- lm(data=mtcars,mpg~am+hp)
summary(t)
c <- mtcars
View(c)
t <- lm(data=mtcars,mpg~am+hp+qsec)
summary(t)
t <- lm(data=mtcars,mpg~am+hp+qsec+wt)
summary(t)
t <- lm(data=mtcars,mpg~am+hp+qsec+wt+disp)
summary(t)
t <- lm(data=mtcars,mpg~am+hp+qsec+wt+disp+vs)
summary(t)
t <- lm(data=mtcars,mpg~am+wt)
summary(t)
t <- lm(data=mtcars,mpg~am+wt+hp)
summary(t)
t <- lm(data=mtcars,mpg~am+wt+hp+vs)
summary(t)
t <- lm(data=mtcars,mpg~am+wt+hp+disp)
summary(t)
t <- lm(data=mtcars,mpg~am+wt+hp+cyl)
summary(t)
t <- lm(data=mtcars,mpg~am+wt+hp+qsec)
summary(t)
t <- lm(data=mtcars,mpg~am+wt+hp+drat)
summary(t)
t <- lm(data=mtcars,mpg~am+wt+hp+gear)
summary(t)
t <- lm(data=mtcars,mpg~am+wt+hp+disp+cyl+gear)
summary(t)
t <- lm(data=mtcars,mpg~am+wt+qsec)
summary(t)
t <- lm(data=mtcars,mpg~am+wt+qsec+carb)
summary(t)
t <- lm(data=mtcars,mpg~am+disp+hp+cyl)
summary(t)
t <- lm(data=mtcars,mpg~am+disp+hp+cyl+wt)
summary(t)
t <- lm(data=mtcars,mpg~am+disp+hp+cyl+wt)
summary(t)
f <- log(mtcars$wt)
c$logCars <- log(mtcars$wt)
t <- lm(data=c,mpg~am+disp+hp+cyl+logCars)
summary(t)
t <- lm(data=c,mpg~am+logCars)
summary(t)
b <-  lm(mpg ~ am+wt+hp+disp+cyl, data = mtcars)
summary(b)
b <-  lm(mpg ~ am+wt+hp+disp+cyl+wt:am, data = mtcars)
summary(b)
b <-  lm(mpg ~ am+wt+wt:am, data = mtcars)
summary(b)
b <-  lm(mpg ~ am+wt+wt:am+hp, data = mtcars)
summary(b)
b <-  lm(mpg ~ am+wt+wt:am+hp+hp:wt, data = mtcars)
summary(b)
b <-  lm(mpg ~ am+wt+wt:am+hp+qsex, data = mtcars)
b <-  lm(mpg ~ am+wt+wt:am+hp+qsec, data = mtcars)
summary(b)
b <-  lm(mpg ~ am+wt+wt:am+gear:am+qsec, data = mtcars)
summary(b)
b <-  lm(mpg ~ am+wt+wt:am+hp:am+qsec, data = mtcars)
summary(b)
b <-  lm(mpg ~ am+wt+wt:am+qsec:am+qsec, data = mtcars)
summary(b)
b <-  lm(mpg ~ am+wt+wt:am+disp:am+qsec, data = mtcars)
summary(b)
b <-  lm(mpg ~ am+wt+wt:am+cyl:am+qsec, data = mtcars)
summary(b)
b <-  lm(mpg ~ am+wt+wt:am+carb:am+qsec, data = mtcars)
summary(b)
b <-  lm(mpg ~ am+wt+wt:am+wt:qsec+qsec, data = mtcars)
summary(b)
b <-  lm(mpg ~ am+wt+wt:am+wt:hp+qsec, data = mtcars)
summary(b)
b <-  lm(mpg ~ am+wt+wt:am+qsec:hp+qsec, data = mtcars)
summary(b)
b <-  lm(mpg ~ am+wt+wt:am+qsec:hp+qsec+hp, data = mtcars)
summary(b)
b <-  lm(mpg ~ am+wt+wt:am+qsec:disp+qsec+hp, data = mtcars)
summary(b)
b <-  lm(mpg ~ am+wt+wt:am+disp:wt+qsec+hp, data = mtcars)
summary(b)
b <-  lm(mpg ~ am+wt+wt:am+qsec+hp, data = mtcars)
summary(b)
b <-  lm(mpg ~ am+wt+wt:am+hp, data = mtcars)
summary(b)
vif(b)
install.packages("car")
library(car)
vif(b)
?vif
sqrt(vif(b))
All <-  lm(mpg ~ ., data = mtcars)
summary(All)
sqrt(vif(All))
plot(mtcars$mg, mtcars$am)
?plot
ggplot(data=mtcars)
plot(mtcars$mpg, mtcars$am)
plot(mtcars$am, mtcars$mpg)
attach(mtcars)
plot(am, mpg, main="Scatterplot Example",
xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
attach(mtcars)
plot(am, mpg, main="MPG by Transmission Type",
xlab="Transmission (1=Manual)", ylab="Miles Per Gallon", pch=19)
attach(mtcars)
plot(am, mpg, main="MPG by Transmission Type",
xlab="Transmission (1=Manual)", ylab="Miles Per Gallon", pch=19)
?mtcars
?plot
?lsfit
attach(mtcars)
plot(am, mpg, main="MPG by Transmission Type",
xlab="Transmission (1=Manual)", ylab="Miles Per Gallon", pch=19)
abline(lsfit(1:10, mtcars))
abline(am, mpg)
abline(lsfit(am, mpg))
attach(mtcars)
plot(am, mpg, main="MPG by Transmission Type",
xlab="Transmission (1=Manual)", ylab="Miles Per Gallon", pch=19)
abline(lm(mpg~am), col="red")
f <- lm(mpg~am)
summary(f)
summary(lm(mpg~am))
summary(f$coef)
summary(f$residuals)
summary(f$rank)
summary(f$fitted.values)
summary(f$qr)
summary(f$model)
summary(f$effects)
summary.lm(f)
summary(f$r.squared)
summary(f$fit)
f$fit
simple <-lm(mpg~am)
summary(simple$coef)
simple <-lm(mpg~am)
summary(simple$coefficients)
simple <-lm(mpg~am)
summary(f$coefficients)
simple <-lm(mpg~am)
summary(f$coef)
coef(f)
corr(mtcars)
cor(mtcars)
?cor
corX <- cor(mtcars)
View(corX)
corx$am
corX$am
corx
corX
n <- as.dataframe(corX)
n <- as.data.frame(corX)
n$am
reg1 <- lm(data=mtcars,mpg~am)
reg2 <- lm(data=mtcars,mpg~am+wt)
reg3 <- lm(data=mtcars,mpg~am+wt+hp)
reg4 <- lm(data=mtcars,mpg~am+wt+hp+wt:am)
anova(reg1,reg2,reg3,reg4)
summary(reg4)
reg4 <- lm(data=mtcars,mpg~am+wt+qsec+wt:am)
summary(reg4)
reg4 <- lm(data=mtcars,mpg~am+wt+qsec+disp+wt:am)
summary(reg4)
reg4 <- lm(data=mtcars,mpg~am+wt+qsec+cyl+wt:am)
summary(reg4)
reg4 <- lm(data=mtcars,mpg~am+wt+qsec+cyl+disp+hp+wt:am)
summary(reg4)
reg1 <- lm(data=mtcars,mpg~am)
reg2 <- lm(data=mtcars,mpg~am+wt)
reg3 <- lm(data=mtcars,mpg~am+wt+qsec)
reg4 <- lm(data=mtcars,mpg~am+wt+qsec+wt:am)
anova(reg1,reg2,reg3,reg4)
reg1 <- lm(data=mtcars,mpg~am)
reg2 <- lm(data=mtcars,mpg~am+wt)
reg3 <- lm(data=mtcars,mpg~am+wt+wt:am)
reg4 <- lm(data=mtcars,mpg~am+wt+wt:am+qsec)
anova(reg1,reg2,reg3,reg4)
reg1 <- lm(data=mtcars,mpg~am)
reg2 <- lm(data=mtcars,mpg~am+wt)
reg3 <- lm(data=mtcars,mpg~am+wt+wt:am)
reg4 <- lm(data=mtcars,mpg~am+wt+wt:am+qsec)
reg5 <- lm(data=mtcars,mpg~am+wt+wt:am+qsec+hp)
anova(reg1,reg2,reg3,reg4,reg5)
?mtcars
?mean
mean(mtcars$wt)
?mtcars
plot(reg4)
?plot
sqrt(vif(reg4))
reg4$coef
reg4
reg4$coefficients
reg4$effects
?vif
lm(mpg~wt + cyl)
lm(mpg~wt + cyl,data=mtcars)
lm(mpg ~ factor(cyl) + wt, data = mtcars)
lm(mpg ~ factor(cyl), data = mtcars)
install.packages(lmtest)
install.packages("lmtest")
library(lmtest)
fit_non_interaction <- lm(mpg ~ cyl + wt, mtcars)
fit_interaction <- lm(mpg ~ cyl + wt + cyl:wt, mtcars)
lrtest(fit_interaction, fit_non_interaction)
summary(fit_interaction)
t <-lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(t)
t <-lm(mpg ~ I(wt) + factor(cyl), data = mtcars)
summary(t)
?I
t <-lm(mpg ~ wt + factor(cyl), data = mtcars)
summary(t)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
max(hatvalues(fit))
?hatvalues
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
influence.measures(fit)$infmat[5, 'dfb.x']
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
influence.measures(fit)$infmat[5, 'dfb.x']
?shuttle
library(mass)
library(MASS)
?shuttle
t <- shuttle
View(t)
t$useNum[t$use == 'auto'] <- 1
t$useNum[t$use == 'noauto'] <- 0
t$windFactor <- factor(t$wind)
logAutolander1 <- glm(t$useNum ~ t$windFactor, family='binomial')
summary(logAutolander1)
fit<-glm(use2 ~ factor(wind) - 1, family = binomial, data = t)
fit<-glm(use ~ factor(wind) - 1, family = binomial, data = t)
summary(fit)
exp(coef(fit))
0.7534247/.7777777777
fit<-glm(count~factor(spray)-1,data=InsectSprays,family=poisson)
summary(fit)$coef
exp(coef(fit))
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots<-c(0)
splineTerms<-sapply(knots,function(knot) (x>knot)*(x-knot))
xmat<-cbind(1,x,splineTerms)
fit<-lm(y~xmat-1)
yhat<-predict(fit)
summary(fit)$coef
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- lm(y ~ x)
summary(x)
install_from_swirl("Regression Models")
library(swirl)
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline,
| lwd=3, col='red')
abline(regrline,lwd=3, col='red')
summary(regrline)
cor(gpa_nor, gch_nor)
s
3
l_nor <- lm(gch_nor ~ gpa_nor)
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
it <- lm(Volume ~ Girth + Height + Constant -1, trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
hed(trees2)
head(trees2)
fit2 <- lm(Volume ~ Height +
| Constant -1, trees2)
fit2 <- lm(Volume ~ Heigt + Constant -1, trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
fit <- lm(child ~ parent)
fit <- lm(child ~ parent, galton)
sumarry(fit)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals, galton$parent)
fit$coef[1]
ols.ic <- fit$coef[1]
fit$coef[2]
ols.slope <- fit$coef[2]
k
0
lhs-rhs
all.equal(lhs,rhs)
9
varChild <- var(galton$child)
fit$residuals
varRes <- var(fit$residuals)
varRes <- var(ols.slope)
varEst <- var(est(ols.slope, ols.ic))
all.equal9vachild,sum(varRes, varEst)
all.equal(varchild,sum(varRes, varEst)
0
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
?createDataPartition
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
histogram(data=training, Superplasticizer )
?histogram
histogram( Superplasticizer, data=training )
histogram(~Superplasticizer, data=training )
min(training$Superplasticizer)
histogram(log(~Superplasticizer), data=training )
histogram(ln(~Superplasticizer), data=training )
t <- log(training$Superplasticizer)
histogram(t)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?preprocess
?preProcess
head(training)
View(training)
row.names(training)
col.names(training)
column.names(training)
columns.names(training)
colnames(training)
training[,58:68]
prec <- preProcess(training[,58:68]), method="pca", pcaComp=7)
preProcess(training[,58:68]), method="pca", pcaComp=7, thresh=80)
preProcess(training[,58:68], method="pca", pcaComp=7, thresh=80)
preProcess(training[,58:68], method="pca", thresh=80)
preProcess(training[,58:68], method="pca", thresh=.80)
n <- head(training[,58:68])
View(n)
n <- head(training[,58:69])
View(n)
n <- head(training[,58:70])
View(n)
n <- head(training[,57:70])
View(n)
preProcess(training[,58:69], method="pca", thresh=.80)
preProcess(training[,58:69], method="pca", pcaComps=7)
preProcess(training[,58:69], method="pca", pcaComp=7)
n <- preProcess(training[,58:69], method="pca", pcaComp=7)
n
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainX <- training[,c(1,58:69)]
head(trainX)
?predict
testX <- testing[, c(58:69)]
pcaPred <- preProcess(training[,c(1,58:69)], method="pca", pcaComp=7)
pcaPred <- preProcess(training[,58:69], method="pca", pcaComp=7)
pr1 <- train(trainX$diagnosis ~ ., method="glm", data=pcaPred)
pcaDat <- predict(pcaPred, (training[,58:69])
)
pr1 <- train(trainX$diagnosis ~ ., method="glm", data=pcaDat)
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
library(caret)
pcaDat <- predict(pcaPred, (training[,58:69]))
pr1 <- train(trainX$diagnosis ~ ., method="glm", data=pcaDat)
pr2 <- train(trainX$diagnosis ~ ., method="glm", data=trainX)
pr1
pr2
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProcess(training[,58:69], method="pca", thresh=.9)
library(caret)
trainData <- read.csv('pml-training.csv')
setwd("~/R/PractMach/projPML")
trainData <- read.csv('pml-training.csv')
?createDataPartition
inTrain <- createDataPartition(y=trainData$classe,
p=0.7, list=FALSE)
